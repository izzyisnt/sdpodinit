import scooby
print(scooby.Report())
import rdkit
import torch
import bio
import Bio
import pymesh2
import esm
import pdbfixer
import openmmforcefields
print(openmmforcefields.__version__)
import importlib.metadata
print(importlib.metadata.version("openmmforcefields"))
try:
    import importlib_resources
    print("✅ importlib_resources — ok")
except ImportError:
    print("❌ importlib_resources — MISSING")
import pymesh
print(pymesh.version)
import pymesh
box = pymesh.generate_box_mesh([0,0,0], [1,1,1])
print(box.num_vertices)
imort pymesh
import pymesh
import pathlib, openff, sys
print(pathlib.Path(openff.__file__).parent)
e1e:~/Surfdock/bash_scripts/test_scriptsprint(f"🔍 Sample name: {sample_name}")  # or args.samplele
abspath("~/SurfDock/comp_surface/tools/APBS/bin/msms")
from pathlib import Path
abspath("~/SurfDock/comp_surface/tools/APBS/bin/msms")
from pathlib import Path
import os
abspath("~/SurfDock/comp_surface/tools/APBS/bin/msms")
from rdkit import Chem
from rdkit.Chem.rdmolops import AssignBondOrdersFromTemplate
template = Chem.MolFromMolFile("589_ideal.sdf")
mol = Chem.MolFromPDBFile("ligand_from_pdb.pdb")
template = Chem.AddHs(template)
mol = Chem.AddHs(mol)
newmol = AssignBondOrdersFromTemplate(template, mol)
Chem.SDWriter("fixed.sdf").write(newmol)
from rdkit.Chem.MolStandardize.rdMolStandardize import AssignBondOrdersFromTemplate
import rdkit
>>> from rdkit import Chem
>>> m = Chem.MolFromSmiles('c1ccccc1O')
>>> print(Chem.MolToSmiles(m))
from rdkit import Chem
m = Chem.MolFromSmiles('c1ccccc1O')
print(Chem.MolToSmiles(m))
from rdkit import Chem
from rdkit.Chem import AllChem
template = Chem.MolFromSmiles("CC(=O)Oc1ccccc1C(=O)O")  # aspirin
mol = Chem.MolFromMolBlock(Chem.MolToMolBlock(template))  # simulate low-info PDB read
result = AllChem.AssignBondOrdersFromTemplate(template, mol)
print(Chem.MolToSmiles(result))
