#!/usr/bin/env python3
"""Download a PDB, separate out the ligand (as SDF) and a *water‑free* receptor PDB.

Usage
-----
$ ./strip_waters_extract_pdb.py 3oy1 589
              ^^^^^  ^^^
              PDB ID RESNAME (ligand three‑letter code)

Changes vs. the original script
-------------------------------
1.  **Waters (HOH/WAT/H2O) are removed** from the receptor output.
2.  A small helper, `is_water()`, centralises the HOH test so you can
    extend it easily.
3.  Minor refactors for readability & type‑safety (f‑strings → explicit
    format where it helps, early exits, …).
"""

import argparse
import os
import sys
from pathlib import Path
from typing import List

import requests
from rdkit import Chem
from rdkit.Chem import rdmolfiles

WATER_CODES = {"HOH", "WAT", "H2O"}

###############################################################################
# Utility helpers
###############################################################################

def is_water(resname: str) -> bool:
    """Return ``True`` if the 3‑letter residue code corresponds to a crystal water."""
    return resname.strip() in WATER_CODES


def download_pdb(pdb_id: str, dest: Path) -> None:
    """Fetch *pdb_id* from the RCSB and write it to *dest* (text mode)."""
    url = f"https://files.rcsb.org/download/{pdb_id}.pdb"
    r = requests.get(url, timeout=15)
    if not r.ok:
        sys.exit(f"❌ Failed to download {pdb_id}: HTTP {r.status_code}")
    dest.write_text(r.text)
    print(f"✅  Downloaded PDB to {dest}")


###############################################################################
# Core extraction logic
###############################################################################

def extract_ligand_and_receptor(
    pdb_path: Path,
    ligand_resname: str,
    ligand_sdf_out: Path,
    receptor_pdb_out: Path,
) -> None:
    """Split *pdb_path* into a ligand SDF and a water‑free receptor PDB."""

    ligand_lines: List[str] = []
    receptor_lines: List[str] = []

    with pdb_path.open() as handle:
        for line in handle:
            if not line.startswith(("ATOM", "HETATM", "END")):
                # ignore TER, REMARK, CRYST1, etc.  Keeps output small & neat.
                continue

            resname = line[17:20]

            # ----------------------- LIGAND -----------------------
            if line.startswith("HETATM") and resname == ligand_resname:
                ligand_lines.append(line)
                continue

            # ----------------------- RECEPTOR ----------------------
            if line.startswith("END"):
                receptor_lines.append(line)
                continue

            if is_water(resname):
                # skip crystal waters entirely
                continue

            # keep everything else except the ligand itself
            if resname != ligand_resname:
                receptor_lines.append(line)

    if not ligand_lines:
        sys.exit(f"❌ No HETATM records found for residue {ligand_resname} in {pdb_path}")

    # ---------------------------------------------------------------------
    # 1. Write ligand SDF (via a temporary PDB parsed by RDKit)
    # ---------------------------------------------------------------------
    tmp_lig_pdb = pdb_path.with_suffix(".ligand.pdb")
    tmp_lig_pdb.write_text("".join(ligand_lines))

    mol = Chem.MolFromPDBFile(str(tmp_lig_pdb), removeHs=False)
    if mol is None:
        tmp_lig_pdb.unlink(missing_ok=True)
        sys.exit("❌ RDKit could not parse the ligand coordinates.")

    with rdmolfiles.SDWriter(str(ligand_sdf_out)) as writer:
        writer.write(mol)
    tmp_lig_pdb.unlink(missing_ok=True)
    print(f"🧪 Ligand written to {ligand_sdf_out}")

    # ---------------------------------------------------------------------
    # 2. Write receptor PDB without waters or ligand atoms
    # ---------------------------------------------------------------------
    receptor_pdb_out.write_text("".join(receptor_lines))
    print(f"🧬 Receptor (water‑free) written to {receptor_pdb_out}")


###############################################################################
# CLI entry‑point
###############################################################################

def main() -> None:
    parser = argparse.ArgumentParser(
        description="Download a PDB and split it into ligand SDF + water‑free receptor PDB",
    )
    parser.add_argument("pdb_id", help="4‑letter PDB ID (e.g. 3OY1)")
    parser.add_argument("resname", help="3‑letter ligand residue name (e.g. 589 or LIG)")

    args = parser.parse_args()

    pdb_id = args.pdb_id.lower()
    ligand_res = args.resname.upper()

    pdb_file = Path(f"{pdb_id}.pdb")
    ligand_sdf = Path("ligand.sdf")
    receptor_pdb = Path("protein.pdb")

    if not pdb_file.exists():
        download_pdb(pdb_id, pdb_file)

    extract_ligand_and_receptor(pdb_file, ligand_res, ligand_sdf, receptor_pdb)

    print("🎉  Done!")


if __name__ == "__main__":
    main()

