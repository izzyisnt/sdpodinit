#!/usr/bin/env python3
"""
redock – SurfDock one‑shot input generator (high‑quality version)
================================================================

*Requires*:
    • RDKit ≥ 2022.09 (for AssignBondOrdersFromTemplate)
    • OpenBabel CLI (`obabel`) available in $PATH

Usage
-----
$ bin/redock 3oy1 589
             └──┬──┘ └─ ligand residue name / number (3‑letter or 3‑digit)

Outputs (under SurfDock):
    SurfDock/data/eval_sample_dirs/test_samples/<pdb>/
        ├── <pdb>_ligand.sdf              (title line = resname)
        ├── <pdb>_ligand.mol2             (Gasteiger charges, resname kept)
        └── <pdb>_protein_processed.pdb   (waters & ligand stripped)

Version & Signature
-------------------
__version__   = "1.0.0"
__signature__ = "jldos‑20250616"
"""
from __future__ import annotations

import argparse
import shutil
import subprocess
import sys
from pathlib import Path
from typing import List

import requests
from rdkit import Chem, rdBase
from rdkit.Chem import AllChem, rdmolfiles

# ---------------------------------------------------------------------------
# Configuration constants
# ---------------------------------------------------------------------------
SURFDOCK_ROOT = Path("~/SurfDock").expanduser()
TEST_SAMPLES  = SURFDOCK_ROOT / "data/eval_sample_dirs/test_samples"
WATER_CODES   = {"HOH", "WAT", "H2O"}
MIN_RDKIT_VER = "2022.09"

# ---------------------------------------------------------------------------
# Environment / dependency checks
# ---------------------------------------------------------------------------
if rdBase.rdkitVersion < MIN_RDKIT_VER:
    sys.exit(
        f"❌ RDKit {MIN_RDKIT_VER}+ required; detected {rdBase.rdkitVersion}. "
        "Please upgrade RDKit and rerun."
    )

if shutil.which("obabel") is None:
    sys.exit("❌ OpenBabel CLI not found in PATH. Install ‘obabel’ ≥ 3.1.")

# ---------------------------------------------------------------------------
# Helper functions
# ---------------------------------------------------------------------------

def download_pdb(pdb_id: str, dest: Path) -> None:
    """Download *pdb_id* from RCSB to *dest*. Abort on failure."""
    url = f"https://files.rcsb.org/download/{pdb_id.upper()}.pdb"
    r = requests.get(url, timeout=20)
    if not r.ok:
        sys.exit(f"❌ Failed to download {pdb_id}: HTTP {r.status_code}")
    dest.write_text(r.text)
    print(f"✅  Downloaded {pdb_id}.pdb → {dest}")


def assign_bond_orders(mol: Chem.Mol) -> Chem.Mol:
    """Return *mol* with bond orders/aromaticity restored using template method."""
    template = Chem.Mol(mol)  # copy
    AllChem.EmbedMolecule(template, randomSeed=42)
    return Chem.AssignBondOrdersFromTemplate(template, mol)  # type: ignore[attr-defined]


def to_high_quality_sdf(pdb_in: Path, resname: str, sdf_out: Path) -> None:
    """Convert ligand PDB → SDF with proper bond orders/aromaticity preserved."""
    mol = Chem.MolFromPDBFile(str(pdb_in), removeHs=False, sanitize=True)
    if mol is None:
        sys.exit("❌ RDKit could not parse ligand coordinates.")

    mol = assign_bond_orders(mol)

    with rdmolfiles.SDWriter(str(sdf_out)) as w:
        w.write(mol)


def build_mol2(sdf_in: Path, mol2_out: Path, resname: str) -> None:
    """Generate charged MOL2 via OpenBabel, preserving *resname*."""
    p1 = subprocess.run(
        ["obabel", str(sdf_in), "-osdf", "--addext", f"resname={resname}"],
        check=True, capture_output=True,
    )
    subprocess.run(
        [
            "obabel", "-isdf", "-", "-omol2", "-O", str(mol2_out),
            "--partialcharge", "gasteiger", "-a",
        ],
        input=p1.stdout,
        check=True,
    )


# ---------------------------------------------------------------------------
# Core workflow
# ---------------------------------------------------------------------------

def extract_and_write(pdb_file: Path, ligand: str, target_dir: Path) -> None:
    ligand_lines: List[str] = []
    receptor_lines: List[str] = []

    with pdb_file.open() as fh:
        for line in fh:
            if line[:6] not in ("ATOM  ", "HETATM", "END   "):
                continue
            res = line[17:20].strip()
            rec = line[:6]

            if rec == "HETATM" and res == ligand:
                ligand_lines.append(line)
                continue
            if rec == "END   ":
                receptor_lines.append(line)
                continue
            if res in WATER_CODES:
                continue
            if res != ligand:
                receptor_lines.append(line)

    if not ligand_lines:
        sys.exit(f"❌ No ligand {ligand} found in {pdb_file.name}.")

    target_dir.mkdir(parents=True, exist_ok=True)

    # Ligand SDF
    tmp_pdb = target_dir / "lig_tmp.pdb"
    tmp_pdb.write_text("".join(ligand_lines))

    sdf = target_dir / f"{pdb_file.stem}_ligand.sdf"
    to_high_quality_sdf(tmp_pdb, ligand, sdf)
    tmp_pdb.unlink(missing_ok=True)

    # Set SDF title line to ligand name only (avoid SurfDock hash issues)
    with sdf.open("r+") as fh:
        lines = fh.readlines()
        lines[0] = f"{ligand}\n"
        fh.seek(0); fh.writelines(lines); fh.truncate()

    # Ligand MOL2 with charges
    mol2 = sdf.with_suffix(".mol2")
    build_mol2(sdf, mol2, ligand)
    print(f"🧪  Ligand SDF  → {sdf}")
    print(f"⚡  Charged MOL2 → {mol2}")

    # Receptor PDB (waters & ligand removed)
    receptor = target_dir / f"{pdb_file.stem}_protein_processed.pdb"
    receptor.write_text("".join(receptor_lines))
    print(f"🧬  Receptor     → {receptor}")


# ---------------------------------------------------------------------------
# CLI entry point
# ---------------------------------------------------------------------------

def main() -> None:
    ap = argparse.ArgumentParser(description="Generate high‑quality SurfDock inputs from a PDB")
    ap.add_argument("pdb",    help="4‑letter PDB code, e.g. 3oy1")
    ap.add_argument("ligand", help="Ligand residue name/number, e.g. 589 or LIG")
    args = ap.parse_args()

    pdb_id  = args.pdb.lower()
    ligand  = args.ligand.upper()

    pdb_path = Path(f"{pdb_id}.pdb")
    if not pdb_path.exists():
        download_pdb(pdb_id, pdb_path)

    out_dir = TEST_SAMPLES / pdb_id
    extract_and_write(pdb_path, ligand, out_dir)

    try:
        rel = out_dir.relative_to(Path.cwd())
        print(f"🎉  All set: ./{rel}")
    except ValueError:
        print(f"🎉  All set: {out_dir}")


if __name__ == "__main__":
    main()
