#!/usr/bin/env python3
"""
redock – one‑shot SurfDock input generator

Usage
-----
$ bin/redock 3oy1 589
             └──┬──┘ └─ ligand residue name / number (3‑letter or 3‑digit)

Creates inside SurfDock’s test‑samples tree:
    <pdb>/
        <pdb>_ligand.sdf               (title line fixed)
        <pdb>_ligand.mol2              (Gasteiger charges)
        <pdb>_protein_processed.pdb    (waters & ligand stripped)

The folder is ready for `goeval` / SurfDock.
"""
from __future__ import annotations

import argparse
import subprocess
import sys
from pathlib import Path
from typing import List

import requests
from rdkit import Chem
from rdkit.Chem import AllChem, rdmolfiles

###############################################################################
# Configuration
###############################################################################
SURFDOCK_ROOT = Path("~/SurfDock").expanduser()
TEST_SAMPLES  = SURFDOCK_ROOT / "data/eval_sample_dirs/test_samples"

WATER_CODES   = {"HOH", "WAT", "H2O"}             # extend if necessary

###############################################################################
# Helpers
###############################################################################

def download_pdb(pdb_id: str, dest: Path) -> None:
    """Download *pdb_id* from RCSB into *dest* (text mode)."""
    url = f"https://files.rcsb.org/download/{pdb_id.upper()}.pdb"
    r = requests.get(url, timeout=20)
    if not r.ok:
        sys.exit(f"❌  Failed to download {pdb_id}: HTTP {r.status_code}")
    dest.write_text(r.text)
    print(f"✅  Downloaded {pdb_id}.pdb → {dest}")


def to_aromatic_sdf(pdb_in: Path, resname: str, sdf_out: Path) -> None:
    """Convert a single‑residue PDB *pdb_in* to SDF with proper bond orders."""
    mol = Chem.MolFromPDBFile(str(pdb_in), removeHs=False, sanitize=True)
    if mol is None:
        sys.exit("❌  RDKit could not parse ligand coordinates")

    try:
        # Modern RDKit (>=2022.9): use template‑based bond assignment
        tmpl = Chem.Mol(mol)
        AllChem.EmbedMolecule(tmpl, randomSeed=42)   # any 3D template works
        mol = Chem.AssignBondOrdersFromTemplate(tmpl, mol)  # type: ignore[attr-defined]
    except AttributeError:
        # Older RDKit – fall back to sanitise/kekulise path (may miss aromatics)
        Chem.SanitizeMol(mol)
        print("⚠️  Old RDKit – using fallback bond perception (aromatics may be lost)")

    with rdmolfiles.SDWriter(str(sdf_out)) as w:
        w.write(mol)


def build_mol2(sdf_in: Path, mol2_out: Path, resname: str) -> None:
    """Charge *sdf_in* → MOL2 with Gasteiger charges via Open Babel."""
    # stage 1: add residue name so SurfDock keeps it in MOL2
    p1 = subprocess.run(
        ["obabel", str(sdf_in), "-osdf", "--addext", f"resname={resname}"],
        check=True, capture_output=True,
    )
    # stage 2: generate MOL2 with charges from STDIN
    subprocess.run(
        [
            "obabel", "-isdf", "-", "-omol2", "-O", str(mol2_out),
            "--partialcharge", "gasteiger", "-a",
        ],
        input=p1.stdout,
        check=True,
    )

###############################################################################
# Core workflow
###############################################################################

def extract_and_write(pdb_file: Path, ligand: str, target_dir: Path) -> None:
    """Split *pdb_file* into ligand SDF/MOL2 and water‑free receptor PDB."""
    ligand_lines: List[str] = []
    receptor_lines: List[str] = []

    with pdb_file.open() as fh:
        for line in fh:
            rec = line[:6]
            if rec not in ("ATOM  ", "HETATM", "END   "):
                continue

            res = line[17:20].strip()

            if rec == "HETATM" and res == ligand:
                ligand_lines.append(line)
                continue

            if rec == "END   ":
                receptor_lines.append(line)
                continue

            if res in WATER_CODES:
                continue  # strip crystal waters

            if res != ligand:
                receptor_lines.append(line)

    if not ligand_lines:
        sys.exit(f"❌  No ligand {ligand} in {pdb_file.name}")

    target_dir.mkdir(parents=True, exist_ok=True)

    # ---------------- Ligand SDF ----------------
    tmp_pdb = target_dir / "lig_tmp.pdb"
    tmp_pdb.write_text("".join(ligand_lines))

    sdf = target_dir / f"{pdb_file.stem}_ligand.sdf"
    to_aromatic_sdf(tmp_pdb, ligand, sdf)
    tmp_pdb.unlink(missing_ok=True)

    # fix the *title line* so SurfDock doesn’t embed file paths in its keys
    with sdf.open("r+") as fh:
        lines = fh.readlines()
        lines[0] = f"{ligand}\n"         # e.g. "589" or "LIG"
        fh.seek(0); fh.writelines(lines); fh.truncate()

    # ---------------- Ligand MOL2 ---------------
    mol2 = sdf.with_suffix(".mol2")
    build_mol2(sdf, mol2, ligand)
    print(f"🧪  Ligand SDF  → {sdf}")
    print(f"⚡  Charged MOL2 → {mol2}")

    # ---------------- Receptor PDB -------------
    receptor = target_dir / f"{pdb_file.stem}_protein_processed.pdb"
    receptor.write_text("".join(receptor_lines))
    print(f"🧬  Receptor     → {receptor}")

###############################################################################
# CLI entry‑point
###############################################################################

def main() -> None:
    ap = argparse.ArgumentParser(description="Generate SurfDock inputs from a PDB")
    ap.add_argument("pdb",    help="4‑letter PDB code, e.g. 3oy1")
    ap.add_argument("ligand", help="Ligand residue name/number, e.g. 589 or LIG")
    args = ap.parse_args()

    pdb_id  = args.pdb.lower()
    ligand  = args.ligand.upper()

    pdb_path = Path(f"{pdb_id}.pdb")
    if not pdb_path.exists():
        download_pdb(pdb_id, pdb_path)

    out_dir = TEST_SAMPLES / pdb_id
    extract_and_write(pdb_path, ligand, out_dir)

    try:
        rel = out_dir.relative_to(Path.cwd())
        print(f"🎉  All set: ./{rel}")
    except ValueError:
        print(f"🎉  All set: {out_dir}")


if __name__ == "__main__":
    main()
